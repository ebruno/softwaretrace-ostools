RELEASE_INFO_FILE = /etc/os-release
# /etc/os-release has the following information that we need.
# NAME and version 
# For example:
# NAME="Ubuntu"
# VERSION="16.04.4 LTS (Xenial Xerus)"
# or
# NAME="CentOS Linux"
# VERSION="7 (Core)"

KERNEL_NAME  = $(shell uname -s)

FEDORA_NAME   = Fedora

CENTOS_NAME   = "CentOS Linux"

RHEL_NAME = "Red Hat Enterprise Linux Server"

ARCHLINUX_NAME = "Arch Linux"



ifeq ($(KERNEL_NAME),Linux)
EXCLUDE_EXTRAS_C = */src_c/freebsd_*
ifeq ("$(wildcard ${RELEASE_INFO_FILE})","")
  $(error Unable to locate ${RELEASE_INFO_FILE})
else
  include ${RELEASE_INFO_FILE}
endif
else
NAME  = ${KERNEL_NAME}
endif

TARFILE_NAME   = softwaretrace-ostools-src

EXCLUDE_PATTERNS_BASE_C       = *CMake* *CTest* */include/* */lib/* */src_cpp/*

EXCLUDE_PATTERNS_C  = ${EXCLUDE_PATTERNS_BASE_C} ${EXCLUDE_EXTRAS_C}

ARCHLINUX_NAME = "Arch Linux"
ifeq ($(NAME),$(CENTOS_NAME))
PREDEFINED = "__linux__=1"
else ifeq ($(NAME),$(RHEL_NAME))
PREDEFINED = "__linux__=1"
else ifeq ($(NAME),Fedora)
PREDEFINED = "__linux__=1"
else ifeq ($(NAME),Ubuntu)
PREDEFINED = "__linux__=1"
else ifeq ($(NAME),$(ARCHLINUX_NAME))
PREDEFINED = "__linux__=1"
else ifeq ($(NAME),$(FreeBSD_NAME))
PREDEFINED = "__FreeBSD__=1"
else
   $(error "$(NAME)" is not a supported operating system)
endif

PREDEFINED = "__linux__=1" "__FreeBSD__=1"


BASEDIR   =  .

DOCDIR_ROOT = ${BASEDIR}
BASE_DOCDIR    =  doc

DOXYGEN_TEMPLATES = childmgt


all:

.PHONY: create_doc_c create_doc_cpp

create_doc_c: 
	@echo "Creating Documentation"
	@if ! test -d ${DOCDIR_ROOT}/${BASE_DOCDIR}/${KERNEL_NAME}; then \
	mkdir -p ${DOCDIR_ROOT}/${BASE_DOCDIR}/${KERNEL_NAME}; \
	fi;
	$(foreach item, ${DOXYGEN_TEMPLATES},(cat Doxyfile_${item}_c; echo "OUTPUT_DIRECTORY=${DOCDIR_ROOT}/${BASE_DOCDIR}/${KERNEL_NAME}/${item}_c"; echo PREDEFINED=${PREDEFINED}; echo EXCLUDE_PATTERNS=${EXCLUDE_PATTERNS_C}) | doxygen -)

create_doc_ccp: 
	@echo "Creating Documentation"
	@if ! test -d ${DOCDIR_ROOT}/${BASE_DOCDIR}/${KERNEL_NAME}; then \
	mkdir -p ${DOCDIR_ROOT}/${BASE_DOCDIR}/${KERNEL_NAME}; \
	fi;
	$(foreach item, ${DOXYGEN_TEMPLATES},(cat Doxyfile_${item}_cpp; echo "OUTPUT_DIRECTORY=${DOCDIR_ROOT}/${BASE_DOCDIR}/${KERNEL_NAME}/${item}_cpp" ) | doxygen -)

clean:
	@rm -f *~
	@rm -r -f ${DOCDIR_ROOT}/${BASE_DOCDIR}/${KERNEL_NAME};

dist_clean: clean
	@rm -r -f ${DOCDIR_ROOT}/${BASE_DOCDIR};

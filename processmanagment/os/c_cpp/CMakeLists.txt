if (EXISTS "/etc/os-release")
  file(STRINGS "/etc/os-release" OS_RELEASE_INFO REGEX "^ID=")
  message(STATUS "OS_RELEASE_INFO ${OS_RELEASE_INFO}")
  if (OS_RELEASE_INFO MATCHES "ID=")
    string(REPLACE "\"" "" OS_RELEASE_INFO  ${OS_RELEASE_INFO})
    string(STRIP "${OS_RELEASE_INFO}"  OS_RELEASE_INFO)
    string(SUBSTRING "${OS_RELEASE_INFO}" 3 -1 OS_NAME)
  endif(OS_RELEASE_INFO MATCHES "ID=")
else (EXISTS "/etc/os-release")
    set(OS_NAME ${CMAKE_HOST_SYSTEM_NAME})
endif(EXISTS "/etc/os-release")
if (EXISTS "${CMAKE_SOURCE_DIR}/version.mk")
  message(STATUS "Using version.mk")
  file(STRINGS "version.mk" MAJOR REGEX "^MAJOR = ")
  file(STRINGS "version.mk" MINOR REGEX "^MINOR = ")
  file(STRINGS "version.mk" SUBVERSION REGEX "^SUBVERSION = ")
  file(STRINGS "version.mk" PRIVATE_BUILD_ID REGEX "^PRIVATE_BUILD_ID = ")
  if (DEFINED BUILD_ID)
     message(STATUS "CMDLINE OVERRIDE BUILD_ID: ${BUILD_ID}")
  else (DEFINED BUILD_ID)
    file(STRINGS "version.mk" BUILD_ID REGEX "^BUILD_ID = ")
    string(REPLACE "BUILD_ID = " "" BUILD_ID "${BUILD_ID}")
  endif (DEFINED BUILD_ID)
  string(REPLACE "MAJOR = " "" MAJOR "${MAJOR}")
  string(REPLACE "MINOR = " "" MINOR "${MINOR}")
  string(REPLACE "SUBVERSION = " "" SUBVERSION "${SUBVERSION}")
  string(REPLACE "PRIVATE_BUILD_ID = " "" PRIVATE_BUILD_ID "${PRIVATE_BUILD_ID}")
  set (SWTRPROCMGT_LIB_VERSION_MAJOR ${MAJOR})
  set (SWTRPROCMGT_LIB_VERSION_MINOR ${MINOR})
  set (SWTRPROCMGT_LIB_VERSION_SUBVERSION ${SUBVERSION})
  set (SWTRSTRLIB_LIB_VERSION_MAJOR ${MAJOR})
  set (SWTRSTRLIB_LIB_VERSION_MINOR ${MINOR})
  set (SWTRSTRLIB_LIB_VERSION_SUBVERSION ${SUBVERSION})
 else(EXISTS "${CMAKE_SOURCE_DIR}/version.mk")
  message(STATUS "Not found version.mk, using defaults.")
  set (SWTRPROCMGT_LIB_VERSION_MAJOR 0)
  set (SWTRPROCMGT_LIB_VERSION_MINOR 9)
  set (SWTRPROCMGT_LIB_VERSION_SUBVERSION 5)
  set (SWTRSTRLIB_LIB_VERSION_MAJOR 0)
  set (SWTRSTRLIB_LIB_VERSION_MINOR 9)
  set (SWTRSTRLIB_LIB_VERSION_SUBVERSION 5)
endif(EXISTS "${CMAKE_SOURCE_DIR}/version.mk")
message(STATUS "Building ${SWTRPROCMGT_LIB_VERSION_MAJOR}.${SWTRPROCMGT_LIB_VERSION_MINOR}.${SWTRPROCMGT_LIB_VERSION_SUBVERSION}")
if (DEFINED CICD_BUILD_ID)
  message(STATUS "CMDLINE OVERRIDE CICD_BUILD_ID: ${CICD_BUILD_ID}")
else(DEFINED CICD_BUILD_ID)
  set(CICD_BUILD_ID 0)
endif (DEFINED CICD_BUILD_ID)


set (SWTRPROCMGTLIB_LIB_VERSION "${SWTRPROCMGTLIB_LIB_VERSION_MAJOR}.${SWTRPROCMGTLIB_LIB_VERSION_MINOR}.${SWTRPROCMGTLIB_LIB_VERSION_SUBVERSION}")
set (SWTRSTRLIB_LIB_VERSION "${SWTRSTRLIB_LIB_VERSION_MAJOR}.${SWTRSTRLIB_LIB_VERSION_MINOR}.${SWTRSTRLIB_LIB_VERSION_SUBVERSION}")

if ("${OS_NAME}" MATCHES "arch")
  set(REQUIRED_VERSION "4.0")
else("${OS_NAME}" MATCHES "arch")
  set(REQUIRED_VERSION "3.20")
endif("${OS_NAME}" MATCHES "arch")
message(STATUS "OS_NAME '${OS_NAME}' CMAKE version ${REQUIRED_VERSION}")
cmake_minimum_required(VERSION ${REQUIRED_VERSION})
message(STATUS "Loaded cmake version ${CMAKE_VERSION}")

project(swtrprocmgtdemo C)

if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
     set(CMAKE_BUILD_TYPE "Release")
endif ("${CMAKE_BUILD_TYPE}" STREQUAL "")

message(STATUS "CMAKE_INSTALL_LOCALSTATEDIR ${CMAKE_INSTALL_LOCALSTATEDIR}")
message(STATUS "CMAKE_INSTALL_SYSCONFDIR  ${CMAKE_INSTALL_SYSCONFDIR}")
message(STATUS "CMAKE_LIBRARY_PATH  ${CMAKE_LIBRARY_PATH}")
message(STATUS "CMAKE_SYSTEM ${CMAKE_SYSTEM}")
message(STATUS "CMAKE_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}")
message(STATUS "CMAKE_HOST_SYSTEM ${CMAKE_HOST_SYSTEM}")
message(STATUS "CMAKE_HOST_SYSTEM_NAME ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "CMAKE_HOST_UNIX ${CMAKE_HOST_UNIX}")


message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE} CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR}")
set (ARC_SYSTEMS "arch")
set (DEBIAN_SYSTEMS "debian;ubuntu")
set (RPM_SYSTEMS "fedora;rhel")
set (LINUX_SYSTEMS "debian;ubuntu;rhel;fedora")
set (CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR})
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/demo_bin)
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY lib)
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY lib)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY demo_bin)
set (DOXYGEN_TEMPLATES childmgt)
set (DOCDIR_ROOT ${CMAKE_BINARY_DIR})
set (BASE_DOCDIR doc)
set (SWTRLIB_VALID_LIBS "swtrprocmgt;swtrstrlib")

if (DEFINED SWTRLIB_BUILD_LIBS)
  message(STATUS "CMDLINE OVERRIDE BUILDING LIBS: ${SWTRLIB_BUILD_LIBS}")
  foreach (entry_value IN LISTS SWTRLIB_BUILD_LIBS)
    if (NOT ${entry_value} IN_LIST SWTRLIB_VALID_LIBS)
      message(FATAL_ERROR " ${entry_value} not supported, must one one of ${SWTRLIB_VALID_LIBS}")
    endif(NOT ${entry_value} IN_LIST SWTRLIB_VALID_LIBS)
  endforeach()
else (DEFINED SWTRLIB_BUILD_LIBS)
  set (SWTRLIB_BUILD_LIBS "swtrprocmgt;swtrstrlib")
endif (DEFINED SWTRLIB_BUILD_LIBS)


message(STATUS "Building libraries ${SWTRLIB_BUILD_LIBS}")
list(LENGTH SWTRLIB_BUILD_LIBS num_libs)
if (num_libs EQUAL 1)
  if ("${OS_NAME}" IN_LIST DEBIAN_SYSTEMS)
    set (CMAKE_INSTALL_PREFIX "usr")
  elseif("${OS_NAME}" IN_LIST "freebsd;arch")
    set (CMAKE_INSTALL_PREFIX "usr/local")
  else("${OS_NAME}" IN_LIST DEBIAN_SYSTEMS)
    set (CMAKE_INSTALL_PREFIX "usr/local")
  endif("${OS_NAME}" IN_LIST DEBIAN_SYSTEMS)
else(num_libs EQUAL 1)
  set (CMAKE_INSTALL_PREFIX "opt/${PROJECT_NAME}")
endif(num_libs EQUAL 1)
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
if (CMAKE_BUILD_TYPE MATCHES "Debug")
    message(STATUS "Adding debug compile options for Debug;Build")
    add_compile_options(-std=c99 ${CMAKE_C_FLAGS_DEBUG} -Wall)
elseif (CMAKE_BUILD_TYPE MATCHES "Release")
  message(STATUS "Adding compile options for Release;Builds")
  if (${OS_NAME} MATCHES "arch")
      message(STATUS "Adding compile options for ArchLinux")
      add_compile_options(-std=c99 -O3 -s)
      string(REPLACE "-Wall" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
      string(REPLACE "-g" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
      string(REPLACE "-O2" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
      string(REPLACE "-O2" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
  else (${OS_NAME} MATCHES "arch")
      add_compile_options(-std=c99 -O3)
  endif (${OS_NAME} MATCHES "arch")
elseif (CMAKE_BUILD_TYPE MATCHES "ReleaseLibsOnly")
  message(STATUS "Adding compile options for ReleaseLibs;Builds")
  if (${OS_NAME} MATCHES "arch")
      add_compile_options(-std=c99 -O3 -s)
      string(REPLACE "-Wall" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
      string(REPLACE "-g" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
      string(REPLACE "-O2" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
      string(REPLACE "-O2" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
  else (${OS_NAME} MATCHES "arch")
      add_compile_options(-std=c99 -O3)
  endif (${OS_NAME} MATCHES "arch")
elseif (CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")
    add_compile_options(-std=c99 -O2 ${CMAKE_C_FLAGS_DEBUG})
endif(CMAKE_BUILD_TYPE MATCHES "Debug")

# -march=x86-64 -mtune=generic -O2 -pipe -fno-plt -fexceptions
# -Wp,-D_FORTIFY_SOURCE=3 -Wformat -Werror=format-security
#-fstack-clash-protection -fcf-protection
#        -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer
# -g -ffile-prefix-map=/home/ebruno/source_code/softwaretrace-ostools/processmanagment/os/c_cpp/ARCHLINUXBUILD/src=/usr/src/debug/swtrprocmgtutils -flto=auto -fPIC BEFORE PUBLIC -std=c99 -O3 -s -MD
message(STATUS "C Flags: ${CMAKE_C_FLAGS}")

if (CMAKE_SYSTEM_NAME MATCHES Linux)
set (libsrc src_c/getmaxpid.c
    src_c/init_ctrl.c
    src_c/getprocstat.c
    src_c/count_children.c
    src_c/set_kernel_version.c
    src_c/reapzombie_status.c)
elseif (CMAKE_SYSTEM_NAME MATCHES FreeBSD)
message(STATUS "Setting proclib to FreeBSD sources")
set (libsrc src_c/getmaxpid.c
    src_c/init_ctrl.c
    src_c/getprocstat.c
    src_c/freebsd_count_children.c
    src_c/set_kernel_version.c
    src_c/freebsd_reapzombie_status.c)
endif (CMAKE_SYSTEM_NAME MATCHES Linux)

set (SWTRPROCMGT_LIB_VERSION_MAJOR 0)
set (SWTRPROCMGT_LIB_VERSION_MINOR 9)
set (SWTRPROCMGT_LIB_VERSION_SUBVERSION 5)
set (SWTRPROCMGT_LIB_VERSION 0.9.5)

set (libsrc_string swtrstrlib/src_c/lremove_char.c
     swtrstrlib/src_c/rremove_char.c
     swtrstrlib/src_c/remove_char.c
    )
if ("swtrstrlib" IN_LIST SWTRLIB_BUILD_LIBS)
message(STATUS "Adding library swtrstrlib to build.")
add_library(swtrstrlib SHARED ${libsrc_string})
add_library(swtrstrlib_static STATIC ${libsrc_string})
set_target_properties(swtrstrlib PROPERTIES VERSION ${SWTRSTRLIB_LIB_VERSION} SOVERSION ${SWTRSTRLIB_LIB_VERSION})
set_target_properties(swtrstrlib_static PROPERTIES VERSION ${SWTRSTRLIB_LIB_VERSION} SOVERSION ${SWTRSTRLIB_LIB_VERSION})
message(STATUS "Adding library swtrstrlib to install.")
install(TARGETS swtrstrlib swtrstrlib_static
		LIBRARY DESTINATION lib
		ARCHIVE DESTINATION lib
		COMPONENT SWTRSTRLIB
	)
install(FILES swtrstrlib/src_c/swtrstrlib.h DESTINATION include COMPONENT SWTRSTRLIB)
endif ("swtrstrlib" IN_LIST SWTRLIB_BUILD_LIBS)

if (DEFINED SWTRLIB_LIB_INSTALL_ROOT)
  message(STATUS "CMDLINE OVERRIDE INSTALL ROOT: ${SWTRLIB_LIB_INSTALL_ROOT}")
else (DEFINED SWTRLIB_LIB_INSTALL_ROOT)
  set (SWTRLIB_LIB_INSTALL_ROOT ${CMAKE_BINARY_DIR})
endif (DEFINED SWTRLIB_LIB_INSTALL_ROOT )

#message(STATUS "INSTALL ROOT: ${SWTRLIB_LIB_INSTALL_ROOT}")

if ("swtrprocmgt" IN_LIST SWTRLIB_BUILD_LIBS)
message(STATUS "Adding library swtrprocmgt to build.")
add_library(swtrprocmgt SHARED ${libsrc})
add_library(swtrprocmgt_static STATIC ${libsrc})
set_target_properties(swtrprocmgt swtrprocmgt_static PROPERTIES VERSION ${SWTRPROCMGT_LIB_VERSION} SOVERSION ${SWTRPROCMGT_LIB_VERSION})
if (CMAKE_BUILD_TYPE MATCHES "Debug")
    foreach (package_name IN LISTS SWTRLIB_BUILD_LIBS)
      target_compile_options("${package_name}" -std=c99 ${CMAKE_C_FLAGS_DEBUG} -Wall)
    endforeach()
elseif (CMAKE_BUILD_TYPE MATCHES "Release")
  message(STATUS "Adding compile options for Release;Builds")
  if (${OS_NAME} MATCHES "arch")
    message(STATUS "Adding compile options for ArchLinux")
    foreach (package_name IN LISTS SWTRLIB_BUILD_LIBS)
      target_compile_options("${package_name}" PRIVATE -std=c99 -O3 -s)
   endforeach()
  else (${OS_NAME} MATCHES "arch")
    foreach (package_name IN LISTS SWTRLIB_BUILD_LIBS)
      target_compile_options("${package_name}" PRIVATE -std=c99 -O3)
   endforeach()
  endif (${OS_NAME} MATCHES "arch")
elseif (CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")
    foreach (package_name IN LISTS SWTRLIB_BUILD_LIBS)
      target_add_compile_options("${package_name}" PRIVATE -std=c99 -O2 ${CMAKE_C_FLAGS_DEBUG})
   endforeach()
endif(CMAKE_BUILD_TYPE MATCHES "Debug")
message(STATUS "Adding library swtrprocmgt to install.")
install(TARGETS swtrprocmgt swtrprocmgt_static
		LIBRARY DESTINATION lib
		ARCHIVE DESTINATION lib
		COMPONENT SWTRPROCLIB
	)
install(FILES src_c/swtrprocmgt.h DESTINATION include COMPONENT SWTRPROCLIB)
endif ("swtrprocmgt" IN_LIST SWTRLIB_BUILD_LIBS)
if (NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "ReleaseLibsOnly"))
  set (CMAKE_INSTALL_DEFAULT_COMPONENT_NAME "applications")
  set(HEADERS_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src_c")
    set(HEADERS_BUILD_DIR "${CMAKE_CURRENT_BINARY_DIR}/src_c")
    message(STATUS "moving ${HEADERS_SOURCE_DIR} to ${HEADERS_BUILD_DIR}")
    file(COPY "${HEADERS_SOURCE_DIR}/"
      DESTINATION "${HEADERS_BUILD_DIR}"
      FILES_MATCHING
      PATTERN "*.h")
    message(STATUS "Adding demo programs")
    set(CMAKE_INSTALL_RPATH /opt/${PROJECT_NAME}/lib)
    add_executable(demo_001 src_demo_c/demo_001.c)
    set_target_properties(demo_001 PROPERTIES INCLUDE_DIRECTORIES ${CMAKE_BINARY_DIR}/src_c)
    add_executable(demo_002 src_demo_c/demo_002.c)
    set_target_properties(demo_002 PROPERTIES INCLUDE_DIRECTORIES ${CMAKE_BINARY_DIR}/src_c)
    if ("${OS_NAME}" IN_LIST LINUX_SYSTEMS)
      add_executable(demo_003 src_demo_c/demo_003.c)
      target_link_libraries(demo_003 PRIVATE swtrprocmgt swtrstrlib)
      set_target_properties(demo_003 PROPERTIES INCLUDE_DIRECTORIES ${CMAKE_BINARY_DIR}/src_c)
      install(TARGETS demo_003 DESTINATION demo_bin)
    endif("${OS_NAME}" IN_LIST LINUX_SYSTEMS)
    target_link_libraries(demo_001 PRIVATE swtrprocmgt swtrstrlib)
    target_link_libraries(demo_002 PRIVATE swtrprocmgt swtrstrlib)
    install(TARGETS swtrstrlib swtrstrlib_static
		LIBRARY DESTINATION lib
		ARCHIVE DESTINATION lib
		COMPONENT applications)
    install(FILES swtrstrlib/src_c/swtrstrlib.h DESTINATION include COMPONENT applications)
    install(TARGETS swtrprocmgt swtrprocmgt_static
		LIBRARY DESTINATION lib
		ARCHIVE DESTINATION lib
		COMPONENT applications)
    install(FILES src_c/swtrprocmgt.h DESTINATION include COMPONENT applications)

    if ("${OS_NAME}" MATCHES "freebsd")
      find_library(PROCLIB_PATH procstat)
      message(STATUS "PROCLIB_PATH: ${PROCLIB_PATH}")
      target_link_libraries(demo_001 PUBLIC procstat)
      target_link_libraries(demo_002 PUBLIC procstat)
    endif ("${OS_NAME}" MATCHES "freebsd")
    if ("${OS_NAME}" IN_LIST ARCH_SYSTEMS)
      if (CMAKE_BUILD_TYPE MATCHES "Debug")
	target_compile_options(demo_01 PRIVATE -std=c99 ${CMAKE_C_FLAGS_DEBUG} -Wall)
	target_compile_options(demo_02 PRIVATE -std=c99 ${CMAKE_C_FLAGS_DEBUG} -Wall)
      elseif (CMAKE_BUILD_TYPE MATCHES "Release")
	message(STATUS "Adding compile options for Release;Builds")
	if (${OS_NAME} MATCHES "arch")
	  message(STATUS "Adding compile options for ArchLinux")
	  target_compile_options(demo_01 PRIVATE -std=c99 -O3 -s)
	  target_compile_options(demo_02 PRIVATE -std=c99 -O3 -s)
	  set(CMAKE_VERBOSE_MAKEFILE ON)
	else (${OS_NAME} MATCHES "arch")
	  target_add_compile_options(demo_01 PRIVATE -std=c99 -O3)
	  target_add_compile_options(demo_02 PRIVATE -std=c99 -O3)
	endif (${OS_NAME} MATCHES "arch")
      elseif (CMAKE_BUILD_TYPE MATCHES "RelWithDebInfo")
	target_add_compile_options(demo_01 PRIVATE -std=c99 -O2 ${CMAKE_C_FLAGS_DEBUG})
	target_add_compile_options(demo_02 PRIVATE -std=c99 -O2 ${CMAKE_C_FLAGS_DEBUG})
      endif(CMAKE_BUILD_TYPE MATCHES "Debug")
    endif ("${OS_NAME}" IN_LIST ARCH_SYSTEMS)
    install(TARGETS demo_001 DESTINATION demo_bin)
    install(TARGETS demo_002 DESTINATION demo_bin)
  else (NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "ReleaseLibsOnly"))
      set (CMAKE_INSTALL_DEFAULT_COMPONENT_NAME "library")
endif (NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "ReleaseLibsOnly"))
list(LENGTH SWTRLIB_BUILD_LIBS num_libs)
message(STATUS "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME: ${CMAKE_INSTALL_DEFAULT_COMPONENT_NAME}")
message(STATUS "num_libs: ${num_libs}")
if (num_libs EQUAL 2)
  if ("${CMAKE_BUILD_TYPE}" STREQUAL "ReleaseLibsOnly")
    message(STATUS "project name: ${PROJECT_NAME}")
    string(REPLACE "demo" "utils" pkg_name "${PROJECT_NAME}")
    set(CPACK_PACKAGE_NAME ${pkg_name})
    set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/${pkg_name}")
  else ("${CMAKE_BUILD_TYPE}" STREQUAL "ReleaseLibsOnly")
    set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/${PROJECT_NAME}")
  endif ("${CMAKE_BUILD_TYPE}" STREQUAL "ReleaseLibsOnly")
endif (num_libs EQUAL 2)

set(CPACK_PACKAGE_VERSION_MAJOR ${SWTRSTRLIB_LIB_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${SWTRSTRLIB_LIB_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${SWTRSTRLIB_LIB_VERSION_SUBVERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "SoftwareTrace String library")
set(CPACK_PACKAGE_HOMEPAGE_URL "https://github.com/ebruno/softwaretrace-ostools")
set(CPACK_PACKAGE_CONTACT "Eric Bruno <eric@ebruno.org>")
if ("${OS_NAME}" IN_LIST DEBIAN_SYSTEMS)
  message(STATUS "Configure to build a ${OS_NAME} package.")
  message(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
  set(CPACK_GENERATOR "DEB")
  list(LENGTH SWTRLIB_BUILD_LIBS num_libs)
  if (num_libs EQUAL 1)
    list(GET SWTRLIB_BUILD_LIBS 0 pkg_name)
    set(CPACK_PACKAGE_NAME ${pkg_name})
  else(num_libs EQUAL 1)
    set (CMAKE_SET_DESTDIR ON)
  endif(num_libs EQUAL 1)
  set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
  set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Eric Bruno <eric@ebruno.org>")
  set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Description.txt") # Create this file
  message(STATUS "CPACK_DEBIAN_PACKAGE_MAINTAINER ${CPACK_DEBIAN_PACKAGE_MAINTAINER}")
  list(LENGTH SWTRLIB_BUILD_LIBS num_libs)
  set(CPACK_DEB_COMPONENT_INSTALL OFF)
  include (CPack)
  cpack_add_component(SWTRSTRLIB DISPLAY_NAME "Softwaretrace string library" DESCRIPTION "Softwaretrace string library")
  cpack_add_component(SWTRPROCMGT DISPLAY_NAME "Softwaretrace process management library" DESCRIPTION "Softwaretrace process management library")
endif ("${OS_NAME}" IN_LIST DEBIAN_SYSTEMS)
if ("${OS_NAME}" IN_LIST RPM_SYSTEMS)
  set(CPACK_GENERATOR "RPM")
  set(CPACK_RPM_PACKAGE_ARCHITECTURE "${CMAKE_SYSTEM_PROCESSOR}")
  message(STATUS "Configure to build a ${OS_NAME} package for ${CPACK_RPM_PACKAGE_ARCHITECTURE}.")
  list(GET SWTRLIB_BUILD_LIBS 0 pkg_name)
  if (num_libs EQUAL 1)
  set(CPACK_PACKAGE_NAME ${pkg_name})
  set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/swtr")
else(num_libs EQUAL 1)
  set (CMAKE_SET_DESTDIR ON)
endif(num_libs EQUAL 1)
  set(CPACK_RPM_FILE_NAME RPM-DEFAULT)
  set(CPACK_RPM_PACKAGE_RELEASE_DIST ON)
  set(CPACK_RPM_PACKAGE_MAINTAINER "Eric Bruno <eric@ebruno.org>")
  set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Description.txt") # Create this file
  set(CPACK_RPM_PACKAGE_LICENSE "BSD")
  message(STATUS "CPACK_RPM_PACKAGE_MAINTAINER: ${CPACK_RPM_PACKAGE_MAINTAINER}")
  set(CPACK_RPM_COMPONENT_INSTALL OFF)
  include (CPack)
  cpack_add_component(SWTRSTRLIB DISPLAY_NAME "Softwaretrace string library" DESCRIPTION "Softwaretrace string library")
  cpack_add_component(SWTRPROCMGT DISPLAY_NAME "Softwaretrace process management library" DESCRIPTION "Softwaretrace process management library")
endif ("${OS_NAME}" IN_LIST RPM_SYSTEMS)

if ("${OS_NAME}" MATCHES "freebsd")
  message(STATUS "Configure to build a ${OS_NAME} package.")
  message(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
  message(STATUS "CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
  set(CPACK_GENERATOR "FREEBSD")
  set(CPACK_FREEBSD_PACKAGE_RELEASE_DIST ON)
  set(CPACK_FREEBSD_PACKAGE_MAINTAINER "Eric Bruno <eric@ebruno.org>")
  set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Description.txt") # Create this file
  set(CPACK_FREEBSD_PACKAGE_LICENSE "BSD")
  set(CPACK_SYSTEM_NAME "${CMAKE_HOST_SYSTEM_PROCESSOR}")
  if (num_libs EQUAL 1)
    list(GET SWTRLIB_BUILD_LIBS 0 pkg_name)
    set(CPACK_PACKAGE_NAME ${pkg_name})
  else(num_libs EQUAL 1)
    set (CMAKE_SET_DESTDIR ON)
  endif(num_libs EQUAL 1)
  message(STATUS "CPACK_FREEBSD_PACKAGE_MAINTAINER: ${CPACK_FREEBSD_PACKAGE_MAINTAINER}")
  include (CPack)
  cpack_add_component(SWTRSTRLIB DISPLAY_NAME "Softwaretrace string library" DESCRIPTION "Softwaretrace string library")
  cpack_add_component(SWTRPROCMGT DISPLAY_NAME "Softwaretrace process management library" DESCRIPTION "Softwaretrace process management library")
endif ("${OS_NAME}" MATCHES "freebsd")
if ("${OS_NAME}" IN_LIST ARC_SYSTEMS)
# Place holder until better support is available.")
  message(STATUS "Configure to build a ${OS_NAME} package.")
endif ("${OS_NAME}" IN_LIST ARC_SYSTEMS)


add_custom_target(create_doc make -C ${CMAKE_BINARY_DIR} DOCDIR_ROOT=${DOCDIR_ROOT} BASE_DOCDIR=${BASE_DOCDIR} -f ${CMAKE_BINARY_DIR}/Makefile_doc create_doc_c
			     COMMAND make -C ${CMAKE_BINARY_DIR} DOCDIR_ROOT=${DOCDIR_ROOT} BASE_DOCDIR=${BASE_DOCDIR} -f ${CMAKE_BINARY_DIR}/Makefile_doc create_doc_cpp
			     COMMENT "Documentation Generation"
		 )

add_custom_target(dist_clean ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/demo_bin
			     COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/doc
			     COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/SPECS
			     COMMAND rm -f *~ src_c/*~ src_cpp/*~ spec_templates/*~  *.xz *.gz
			     COMMAND rm -f */*.so* */*.a
			     COMMAND rm -f -r ${CMAKE_BINARY_DIR}/CMakeFiles cmake_install.cmake CMakeCache.txt CTestTestfile.cmake Makefile src)
